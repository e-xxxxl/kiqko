"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  ModalProvider: () => ModalProvider,
  useModal: () => useModal
});
module.exports = __toCommonJS(src_exports);
var import_react6 = __toESM(require("react"));

// src/components/DefaultComponents.tsx
var import_react = __toESM(require("react"));
var wrapperStyle = {
  position: "fixed",
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  zIndex: 1e3
};
var Wrapper = ({ children }) => {
  return /* @__PURE__ */ import_react.default.createElement("div", { style: wrapperStyle }, children);
};
var overlayStyle = {
  position: "fixed",
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  backgroundColor: "rgba(0, 0, 0, 0.5)"
};
var Overlay = () => {
  return /* @__PURE__ */ import_react.default.createElement("div", { style: overlayStyle });
};
var Modal = ({
  children
}) => {
  return /* @__PURE__ */ import_react.default.createElement(import_react.Fragment, null, children);
};

// src/components/Modal.tsx
var import_focus_trap_react = __toESM(require("focus-trap-react"));
var import_react3 = __toESM(require("react"));
var import_react_dom = require("react-dom");

// src/hooks/useBodyScrollLock.ts
var import_body_scroll_lock = require("body-scroll-lock");
var import_react2 = require("react");
var useBodyScrollLock = (ref, isOpen, preventScroll) => {
  (0, import_react2.useEffect)(() => {
    if (ref.current === null) {
      return;
    }
    if (preventScroll) {
      if (isOpen) {
        (0, import_body_scroll_lock.disableBodyScroll)(ref.current, {
          reserveScrollBarGap: true
        });
      } else {
        (0, import_body_scroll_lock.enableBodyScroll)(ref.current);
      }
      return () => {
        (0, import_body_scroll_lock.clearAllBodyScrollLocks)();
      };
    }
  }, [isOpen, preventScroll, ref]);
};

// src/components/Modal.tsx
var ModalWrapper = ({
  children,
  isOpen,
  open,
  close,
  elementId = "root",
  title,
  description,
  preventScroll,
  focusTrapOptions,
  components,
  additionalProps
}) => {
  const dialogRef = (0, import_react3.useRef)(null);
  const _focusTrapOptions = (0, import_react3.useMemo)(
    () => ({
      ...focusTrapOptions,
      onActivate: () => {
        open();
        focusTrapOptions.onActivate?.();
      },
      onDeactivate: () => {
        close();
        focusTrapOptions.onDeactivate?.();
      },
      clickOutsideDeactivates: focusTrapOptions.clickOutsideDeactivates ?? true,
      fallbackFocus: focusTrapOptions.fallbackFocus ?? dialogRef.current ?? void 0
    }),
    [close, focusTrapOptions, open]
  );
  useBodyScrollLock(dialogRef, isOpen, preventScroll);
  if (isOpen === false) {
    return null;
  }
  return (0, import_react_dom.createPortal)(
    /* @__PURE__ */ import_react3.default.createElement(components.Wrapper, null, /* @__PURE__ */ import_react3.default.createElement(components.Overlay, null), /* @__PURE__ */ import_react3.default.createElement(import_focus_trap_react.default, { focusTrapOptions: _focusTrapOptions }, /* @__PURE__ */ import_react3.default.createElement(
      "div",
      {
        ref: dialogRef,
        role: "dialog",
        "aria-modal": "true",
        tabIndex: -1,
        style: { position: "relative" }
      },
      /* @__PURE__ */ import_react3.default.createElement(
        components.Modal,
        {
          title,
          description,
          close,
          additionalProps
        },
        children
      )
    ))),
    document.getElementById(elementId)
  );
};

// src/hooks/useModalConfig.ts
var import_react4 = require("react");
var ModalConfigContext = (0, import_react4.createContext)({});
var useModalConfig = () => {
  return (0, import_react4.useContext)(ModalConfigContext);
};

// src/components/ModalProvider.tsx
var import_react5 = __toESM(require("react"));
var ModalProvider = ({
  children,
  ...props
}) => {
  return /* @__PURE__ */ import_react5.default.createElement(ModalConfigContext.Provider, { value: props }, children);
};

// src/index.tsx
var defaultOptions = {
  initialValue: false,
  preventScroll: false,
  focusTrapOptions: {},
  components: {}
};
var useModal = (elementId = "root", options) => {
  const modalConfig = useModalConfig();
  const { initialValue, preventScroll, focusTrapOptions, components } = (0, import_react6.useMemo)(
    () => Object.assign({}, defaultOptions, modalConfig, options),
    [modalConfig, options]
  );
  const [isOpen, setOpen] = (0, import_react6.useState)(initialValue);
  const open = (0, import_react6.useCallback)(() => {
    setOpen(true);
  }, [setOpen]);
  const close = (0, import_react6.useCallback)(() => {
    setOpen(false);
  }, [setOpen]);
  const Wrapper2 = components.Wrapper ?? Wrapper;
  const Overlay2 = components.Overlay ?? Overlay;
  const Modal2 = components.Modal ?? Modal;
  const _ModalWrapper = (0, import_react6.useCallback)(
    ({ title, description, children, additionalProps }) => {
      return /* @__PURE__ */ import_react6.default.createElement(
        ModalWrapper,
        {
          isOpen,
          open,
          close,
          elementId,
          title,
          description,
          preventScroll,
          focusTrapOptions,
          components: {
            Modal: Modal2,
            Overlay: Overlay2,
            Wrapper: Wrapper2
          },
          additionalProps
        },
        children
      );
    },
    [
      Modal2,
      Overlay2,
      Wrapper2,
      close,
      elementId,
      focusTrapOptions,
      isOpen,
      open,
      preventScroll
    ]
  );
  return [_ModalWrapper, open, close, isOpen];
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ModalProvider,
  useModal
});
