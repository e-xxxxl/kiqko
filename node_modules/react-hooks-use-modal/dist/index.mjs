// src/index.tsx
import React5, { useCallback, useMemo as useMemo2, useState } from "react";

// src/components/DefaultComponents.tsx
import React, { Fragment } from "react";
var wrapperStyle = {
  position: "fixed",
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  zIndex: 1e3
};
var Wrapper = ({ children }) => {
  return /* @__PURE__ */ React.createElement("div", { style: wrapperStyle }, children);
};
var overlayStyle = {
  position: "fixed",
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  backgroundColor: "rgba(0, 0, 0, 0.5)"
};
var Overlay = () => {
  return /* @__PURE__ */ React.createElement("div", { style: overlayStyle });
};
var Modal = ({
  children
}) => {
  return /* @__PURE__ */ React.createElement(Fragment, null, children);
};

// src/components/Modal.tsx
import FocusTrap from "focus-trap-react";
import React2, { useMemo, useRef } from "react";
import { createPortal } from "react-dom";

// src/hooks/useBodyScrollLock.ts
import {
  clearAllBodyScrollLocks,
  disableBodyScroll,
  enableBodyScroll
} from "body-scroll-lock";
import { useEffect } from "react";
var useBodyScrollLock = (ref, isOpen, preventScroll) => {
  useEffect(() => {
    if (ref.current === null) {
      return;
    }
    if (preventScroll) {
      if (isOpen) {
        disableBodyScroll(ref.current, {
          reserveScrollBarGap: true
        });
      } else {
        enableBodyScroll(ref.current);
      }
      return () => {
        clearAllBodyScrollLocks();
      };
    }
  }, [isOpen, preventScroll, ref]);
};

// src/components/Modal.tsx
var ModalWrapper = ({
  children,
  isOpen,
  open,
  close,
  elementId = "root",
  title,
  description,
  preventScroll,
  focusTrapOptions,
  components,
  additionalProps
}) => {
  const dialogRef = useRef(null);
  const _focusTrapOptions = useMemo(
    () => ({
      ...focusTrapOptions,
      onActivate: () => {
        open();
        focusTrapOptions.onActivate?.();
      },
      onDeactivate: () => {
        close();
        focusTrapOptions.onDeactivate?.();
      },
      clickOutsideDeactivates: focusTrapOptions.clickOutsideDeactivates ?? true,
      fallbackFocus: focusTrapOptions.fallbackFocus ?? dialogRef.current ?? void 0
    }),
    [close, focusTrapOptions, open]
  );
  useBodyScrollLock(dialogRef, isOpen, preventScroll);
  if (isOpen === false) {
    return null;
  }
  return createPortal(
    /* @__PURE__ */ React2.createElement(components.Wrapper, null, /* @__PURE__ */ React2.createElement(components.Overlay, null), /* @__PURE__ */ React2.createElement(FocusTrap, { focusTrapOptions: _focusTrapOptions }, /* @__PURE__ */ React2.createElement(
      "div",
      {
        ref: dialogRef,
        role: "dialog",
        "aria-modal": "true",
        tabIndex: -1,
        style: { position: "relative" }
      },
      /* @__PURE__ */ React2.createElement(
        components.Modal,
        {
          title,
          description,
          close,
          additionalProps
        },
        children
      )
    ))),
    document.getElementById(elementId)
  );
};

// src/hooks/useModalConfig.ts
import { createContext, useContext } from "react";
var ModalConfigContext = createContext({});
var useModalConfig = () => {
  return useContext(ModalConfigContext);
};

// src/components/ModalProvider.tsx
import React4 from "react";
var ModalProvider = ({
  children,
  ...props
}) => {
  return /* @__PURE__ */ React4.createElement(ModalConfigContext.Provider, { value: props }, children);
};

// src/index.tsx
var defaultOptions = {
  initialValue: false,
  preventScroll: false,
  focusTrapOptions: {},
  components: {}
};
var useModal = (elementId = "root", options) => {
  const modalConfig = useModalConfig();
  const { initialValue, preventScroll, focusTrapOptions, components } = useMemo2(
    () => Object.assign({}, defaultOptions, modalConfig, options),
    [modalConfig, options]
  );
  const [isOpen, setOpen] = useState(initialValue);
  const open = useCallback(() => {
    setOpen(true);
  }, [setOpen]);
  const close = useCallback(() => {
    setOpen(false);
  }, [setOpen]);
  const Wrapper2 = components.Wrapper ?? Wrapper;
  const Overlay2 = components.Overlay ?? Overlay;
  const Modal2 = components.Modal ?? Modal;
  const _ModalWrapper = useCallback(
    ({ title, description, children, additionalProps }) => {
      return /* @__PURE__ */ React5.createElement(
        ModalWrapper,
        {
          isOpen,
          open,
          close,
          elementId,
          title,
          description,
          preventScroll,
          focusTrapOptions,
          components: {
            Modal: Modal2,
            Overlay: Overlay2,
            Wrapper: Wrapper2
          },
          additionalProps
        },
        children
      );
    },
    [
      Modal2,
      Overlay2,
      Wrapper2,
      close,
      elementId,
      focusTrapOptions,
      isOpen,
      open,
      preventScroll
    ]
  );
  return [_ModalWrapper, open, close, isOpen];
};
export {
  ModalProvider,
  useModal
};
