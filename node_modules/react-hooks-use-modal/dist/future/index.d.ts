import React from 'react';

interface ModalProviderProps extends UseModalOptions {
    children?: React.ReactNode;
}
declare const ModalProvider: React.FC<ModalProviderProps>;

type ModalWrapperProps = {
    title?: React.ReactNode;
    description?: React.ReactNode;
    children?: React.ReactNode;
    dialogProps?: React.ComponentProps<'dialog'>;
    contentProps?: React.ComponentProps<'div'>;
};
type ModalContentProps = Pick<ModalWrapperProps, 'title' | 'description' | 'children' | 'contentProps'>;
type UseModalOptions = {
    initialValue?: boolean;
    closeOnOverlayClick?: boolean;
    components?: {
        ModalContent?: React.FC<ModalContentProps>;
    };
};
type UseModalResult = [
    ModalWrapper: React.FC<ModalWrapperProps>,
    open: () => void,
    close: () => void,
    isOpen: boolean
];
type UseModal = (options?: UseModalOptions) => UseModalResult;
declare const useModal: UseModal;

export { ModalContentProps, ModalProvider, ModalWrapperProps, UseModal, UseModalOptions, useModal };
