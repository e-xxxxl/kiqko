{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useEventCallback.js", "../../@restart/hooks/esm/useCommittedRef.js"],
  "sourcesContent": ["import { useCallback } from 'react';\r\nimport useCommittedRef from './useCommittedRef';\r\nexport default function useEventCallback(fn) {\r\n  var ref = useCommittedRef(fn);\r\n  return useCallback(function () {\r\n    return ref.current && ref.current.apply(ref, arguments);\r\n  }, [ref]);\r\n}", "import { useEffect, useRef } from 'react';\r\n/**\r\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\r\n * value is the one rendered with. Generally only required for Concurrent mode usage\r\n * where previous work in `render()` may be discarded befor being used.\r\n *\r\n * This is safe to access in an event handler.\r\n *\r\n * @param value The `Ref` value\r\n */\r\n\r\nfunction useCommittedRef(value) {\r\n  var ref = useRef(value);\r\n  useEffect(function () {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref;\r\n}\r\n\r\nexport default useCommittedRef;"],
  "mappings": ";;;;;;;;AAAA,IAAAA,gBAA4B;;;ACA5B,mBAAkC;AAWlC,SAAS,gBAAgB,OAAO;AAC9B,MAAI,UAAM,qBAAO,KAAK;AACtB,8BAAU,WAAY;AACpB,QAAI,UAAU;AAAA,EAChB,GAAG,CAAC,KAAK,CAAC;AACV,SAAO;AACT;AAEA,IAAO,0BAAQ;;;ADjBA,SAAR,iBAAkC,IAAI;AAC3C,MAAI,MAAM,wBAAgB,EAAE;AAC5B,aAAO,2BAAY,WAAY;AAC7B,WAAO,IAAI,WAAW,IAAI,QAAQ,MAAM,KAAK,SAAS;AAAA,EACxD,GAAG,CAAC,GAAG,CAAC;AACV;",
  "names": ["import_react"]
}
