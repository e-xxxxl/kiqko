{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useMergedRefs.js"],
  "sourcesContent": ["import { useMemo } from 'react';\r\n\r\nvar toFnRef = function toFnRef(ref) {\r\n  return !ref || typeof ref === 'function' ? ref : function (value) {\r\n    ref.current = value;\r\n  };\r\n};\r\n\r\nexport function mergeRefs(refA, refB) {\r\n  var a = toFnRef(refA);\r\n  var b = toFnRef(refB);\r\n  return function (value) {\r\n    if (a) a(value);\r\n    if (b) b(value);\r\n  };\r\n}\r\n/**\r\n * Create and returns a single callback ref composed from two other Refs.\r\n *\r\n * ```tsx\r\n * const Button = React.forwardRef((props, ref) => {\r\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\r\n *   const mergedRef = useMergedRefs(ref, attachRef);\r\n *\r\n *   return <button ref={mergedRef} {...props}/>\r\n * })\r\n * ```\r\n *\r\n * @param refA A Callback or mutable Ref\r\n * @param refB A Callback or mutable Ref\r\n * @category refs\r\n */\r\n\r\nfunction useMergedRefs(refA, refB) {\r\n  return useMemo(function () {\r\n    return mergeRefs(refA, refB);\r\n  }, [refA, refB]);\r\n}\r\n\r\nexport default useMergedRefs;"],
  "mappings": ";;;;;;;;AAAA,mBAAwB;AAExB,IAAI,UAAU,SAASA,SAAQ,KAAK;AAClC,SAAO,CAAC,OAAO,OAAO,QAAQ,aAAa,MAAM,SAAU,OAAO;AAChE,QAAI,UAAU;AAAA,EAChB;AACF;AAEO,SAAS,UAAU,MAAM,MAAM;AACpC,MAAI,IAAI,QAAQ,IAAI;AACpB,MAAI,IAAI,QAAQ,IAAI;AACpB,SAAO,SAAU,OAAO;AACtB,QAAI,EAAG,GAAE,KAAK;AACd,QAAI,EAAG,GAAE,KAAK;AAAA,EAChB;AACF;AAkBA,SAAS,cAAc,MAAM,MAAM;AACjC,aAAO,sBAAQ,WAAY;AACzB,WAAO,UAAU,MAAM,IAAI;AAAA,EAC7B,GAAG,CAAC,MAAM,IAAI,CAAC;AACjB;AAEA,IAAO,wBAAQ;",
  "names": ["toFnRef"]
}
